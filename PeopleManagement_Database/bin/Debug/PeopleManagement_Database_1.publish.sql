/*
Deployment script for PeopleManagementDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PeopleManagementDB"
:setvar DefaultFilePrefix "PeopleManagementDB"
:setvar DefaultDataPath "C:\Users\ssvin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\ssvin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_EmailAddress]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_EmailAddress]
    ON [dbo].[Users]([EmailAddress] ASC);


GO
PRINT N'Creating Procedure [dbo].[spUsers_AddUser]...';


GO
CREATE PROCEDURE [dbo].[spUsers_AddUser]
	@FirstName NVARCHAR(150), 
	@Surname NVARCHAR(150), 
	@MobileNumber NVARCHAR(20), 
	@EmailAddress NVARCHAR(200), 
	@PasswordHash NVARCHAR(MAX), 
	@OTP NVARCHAR(50), 
	@EmailOTP NVARCHAR(50)
AS 
BEGIN
	 DECLARE @IsSuccess BIT = 0, @Message VARCHAR(250) = '', @Status VARCHAR(250) = '';  
	 DECLARE @NewUserId INT;
	 SET NOCOUNT ON;
	 BEGIN TRY
		BEGIN TRANSACTION;

        INSERT INTO Users (FirstName, Surname, MobileNumber, EmailAddress, PasswordHash, OTP, EmailOTP)
        VALUES (@FirstName, @Surname, @MobileNumber, @EmailAddress, @PasswordHash, @OTP, @EmailOTP);

		SET @NewUserId = SCOPE_IDENTITY();

		INSERT INTO dbo.UserRoles(FK_UserId, FK_RoleId)
		VALUES(@NewUserId , 1)

        COMMIT TRANSACTION;

        SET @IsSuccess = 1;
        SET @Message = 'User created successfully with ID: ' + CAST(@NewUserId AS VARCHAR(10));
        SET @Status = 'Success';

	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

		SELECT @IsSuccess = 0, @Message = ERROR_MESSAGE(), @Status = ERROR_TYPE();
	 END CATCH

	 SELECT @IsSuccess AS [IsSuccess], @Message AS [Message], @Status AS [Status];
END
GO
PRINT N'Creating Procedure [dbo].[spUsers_FindByUsername]...';


GO
CREATE PROCEDURE [dbo].[spUsers_FindByUsername]
	@EmailAddress NVARCHAR(200)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT Id
          ,FirstName
		  ,Surname
		  ,MobileNumber
		  ,MobileNumberConfirmed
		  ,OTP
		  ,EmailAddress
		  ,PasswordHash
		  ,EmailConfirmed
		  ,EmailOTP
		  ,DateCreated
		  ,LastLogin
		  ,PasswordLastUpdate
		  ,Active
		  ,RefreshToken
		  ,RefreshTokenExpiryTime
	FROM [dbo].[Users] 
	WHERE EmailAddress = @EmailAddress
	
END
GO
PRINT N'Creating Procedure [dbo].[spUsers_UpdateUserRefreshToken]...';


GO
CREATE PROCEDURE [dbo].[spUsers_UpdateUserRefreshToken]
	@EmailAddress NVARCHAR(200),
	@RefreshToken NVARCHAR(200),
	@RefreshTokenExpiryTime DATETIME
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE [dbo].[Users]
	SET RefreshToken = @RefreshToken
	   ,RefreshTokenExpiryTime = @RefreshTokenExpiryTime
	   ,LastLogin = GETDATE()
	WHERE EmailAddress = @EmailAddress
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
CREATE TABLE #aspNetRoles ([Id] [INT] IDENTITY(1,1) NOT NULL, [Name] [NVARCHAR](200) NOT NULL)
INSERT INTO #aspNetRoles([Name])
VALUES ('Admin'),
	   ('General')
	   --Insert into physical table
INSERT INTO [dbo].[Roles] ([Name], [Description], [AppId])
SELECT [Name], [Description], [AppId] FROM #aspNetRoles
WHERE [Name] NOT IN (SELECT [Name] FROM [dbo].[Roles] WITH (NOLOCK))
DROP TABLE #aspNetRoles
GO

GO
PRINT N'Update complete.';


GO
